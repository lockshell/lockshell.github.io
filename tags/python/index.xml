<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 络壳 LockShell</title>
    <link>https://blog.lockshell.com/tags/python/</link>
    <description>Recent content in Python on 络壳 LockShell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Dec 2019 17:39:40 +0800</lastBuildDate>
    
	<atom:link href="https://blog.lockshell.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python生成随机密码</title>
      <link>https://blog.lockshell.com/2019/12/10/python-generate-random-password/</link>
      <pubDate>Tue, 10 Dec 2019 17:39:40 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/12/10/python-generate-random-password/</guid>
      <description>&lt;p&gt;Python生成随机密码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Http连接池</title>
      <link>https://blog.lockshell.com/2019/12/04/python-requests-http-connection-pool/</link>
      <pubDate>Wed, 04 Dec 2019 20:28:00 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/12/04/python-requests-http-connection-pool/</guid>
      <description>HTTP是建立在TCP上面的，一次HTTP请求要经历TCP三次握手阶段，然后发送请求，得到相应数据，最后TCP断开连接。 如果我们要发出多个H</description>
    </item>
    
    <item>
      <title>Python函数返回值设计</title>
      <link>https://blog.lockshell.com/2019/12/04/python-function-return-value/</link>
      <pubDate>Wed, 04 Dec 2019 09:05:40 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/12/04/python-function-return-value/</guid>
      <description>&lt;p&gt;Python函数同时返回错误值和数据怎么设计？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django QuerySet缓存和迭代器</title>
      <link>https://blog.lockshell.com/2019/09/16/django-queryset-cache-and-iterator/</link>
      <pubDate>Mon, 16 Sep 2019 12:29:35 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/09/16/django-queryset-cache-and-iterator/</guid>
      <description>Lazy QuerySet A queryset in Django represents a number of rows in the database, optionally filtered by a query. For example, the following code represents all people in the database whose first name is ‘Dave’: person_set = Person.objects.filter(first_name=&amp;quot;Dave&amp;quot;) The above code doesn’t run any database queries. You can can take the person_set and apply additional filters, or pass</description>
    </item>
    
    <item>
      <title>Python变量与参数传递</title>
      <link>https://blog.lockshell.com/2019/09/10/python-function-argument/</link>
      <pubDate>Tue, 10 Sep 2019 18:28:46 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/09/10/python-function-argument/</guid>
      <description>Python变量 变量的赋值，只是表示让变量指向了某个对象，并不表示拷贝对象给变量；而一个对象，可以被多个变量所指向。 a = 1 b = a a = a + 1 #</description>
    </item>
    
    <item>
      <title>Django数据库连接池</title>
      <link>https://blog.lockshell.com/2019/08/28/django-db-connection-pool/</link>
      <pubDate>Wed, 28 Aug 2019 02:40:57 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/08/28/django-db-connection-pool/</guid>
      <description>数据库长连接 长连接是指程序之间的连接在建立之后，就一直打开，被后续程序重用。使用长连接的初衷是减少连接的开销。 先看看官方文档是怎么讲Djan</description>
    </item>
    
    <item>
      <title>Django数据库分库&#43;读写分离</title>
      <link>https://blog.lockshell.com/2019/08/26/django-database-partition/</link>
      <pubDate>Mon, 26 Aug 2019 20:47:37 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/08/26/django-database-partition/</guid>
      <description>为了解决单个数据库的性能问题，除了使用性能更好的硬件之外， 另外一个思路就是将一个数据库切分成多个部分放到不同的数据库上，从而缓解单一数据库的</description>
    </item>
    
    <item>
      <title>Django数据库分表</title>
      <link>https://blog.lockshell.com/2019/08/25/django-orm-db-table-partition/</link>
      <pubDate>Sun, 25 Aug 2019 10:37:30 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2019/08/25/django-orm-db-table-partition/</guid>
      <description>Django ORM没有提供默认的分表功能，给访问分表的数据库带来的不变。那么Django分表怎么实现呢？ 分析Django ORM 在实现具体的方案之前，我们先</description>
    </item>
    
    <item>
      <title>Python SQLAlchemy ORM示例</title>
      <link>https://blog.lockshell.com/2017/07/08/python-sqlalchemy-orm-demo/</link>
      <pubDate>Sat, 08 Jul 2017 01:20:04 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2017/07/08/python-sqlalchemy-orm-demo/</guid>
      <description>SQLAlchemy的是Python的SQL工具包和对象关系映射，给应用程序开发者提供SQL的强大功能和灵活性。 安装 pip install mysql-python pip install sqlalchemy 初始化 SQLAlchemy OR</description>
    </item>
    
    <item>
      <title>Python实现LRU Cache</title>
      <link>https://blog.lockshell.com/2017/07/05/python-lru-cache/</link>
      <pubDate>Wed, 05 Jul 2017 13:26:07 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2017/07/05/python-lru-cache/</guid>
      <description>LRU: 最近最少使用算法。 使用场景：在有限的空间存储对象时，当空间满时，按照一定的原则删除原有对象。 常用的算法有LRU，FIFO，LFU。如mem</description>
    </item>
    
    <item>
      <title>Python Thrift 示例</title>
      <link>https://blog.lockshell.com/2017/05/04/python-thrift-demo/</link>
      <pubDate>Thu, 04 May 2017 01:28:34 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2017/05/04/python-thrift-demo/</guid>
      <description>Apache Thrift是Facebook实现的一种高效的、支持多种编程语言的远程服务调用的框架。本文将从 Python开发人员角度简单介绍 Apache Thrift 的架构、</description>
    </item>
    
    <item>
      <title>Python Gunicorn&#43;gevent模式启动Flask应用</title>
      <link>https://blog.lockshell.com/2016/05/19/python-gunicorn-gevent-server-for-flask/</link>
      <pubDate>Thu, 19 May 2016 13:43:57 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2016/05/19/python-gunicorn-gevent-server-for-flask/</guid>
      <description>Flask，Django都自带WSGI server，当然性能都一般，自带的web server更多的是测试用途。 线上发布时，则使用高性能的WS</description>
    </item>
    
    <item>
      <title>Python pip配置默认镜像源</title>
      <link>https://blog.lockshell.com/2016/02/29/python-pip-source-config/</link>
      <pubDate>Mon, 29 Feb 2016 10:01:16 +0800</pubDate>
      
      <guid>https://blog.lockshell.com/2016/02/29/python-pip-source-config/</guid>
      <description>在连接pip官网的时候状况不是很稳定。很多国内镜像站可以使用，加速下载。 使用镜像源很简单，用-i指定就行了： easy_install -i http://pypi.douban.com/simple/ gevent pip install -i http://pypi.douban.com/simple/ gevent 如果觉得太麻烦</description>
    </item>
    
  </channel>
</rss>